-module(second).

-export([one/2, two/3, three/2]).

one(X, X) ->
    {7 ~> Y}  = X,
    Y;
one(1, $c) ->
    2;
one(_, 1.0) ->
    catch 1;
one("bar", _Ignore) ->
    1.1e12;
one(<X>, <Z:Y>) ->
    $i;
one(<X:14>, <Z:8/integer>) ->
    <X>.

two(M, F, A) ->
    fun M:F/A;
two(M, F, default) ->
    fun M:F/42;
two(default, F, A) ->
    fun test:F/A;
two(M, default, A) ->
    fun M:cucumber/A;
two(default, default, default) ->
    fun test:cucumber/42;
two(A, B, C) ->
    fun(A, C) ->
            B
    end;
two(null, null, null) ->
    fun(X, Y) ->
            case X of null ->
                    Y;
                _ ->
                    X
            end;
       fun(X, X) ->
               X;
          fun(Y, X) ->
                  Y
    end.

three(1, A) ->
    -A;
three(0, A) ->
    +A;
three(A, B) ->
    A + B;
three(Map, N) ->
    {X || Map => X, X >= N};
three(Binary, N) ->
    < <X:16> || Binary => <X:8>, X > 20 >;
three(After, X) ->
    receive
        X ->
            ok
    after After ->
            false
    end.

